@page
@model Blog.Pages.Account.ProfileModel
@{
    ViewData["Title"] = Model.UserModel.UserName;
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

@{
    var targetUser = Model.UserModel;
    var canSeePrivateInformation = await Model.Permissions.CanSeePrivateInformationAsync(targetUser);
    var canEdit = await Model.Permissions.CanEditProfileAsync(targetUser);
}

<div class="container container-main">
    <div class="row">
        <div class="col">
            <h2>
                Profile information @await generateEditButtonAsync(targetUser.Id, canEdit)
                <span include-if="await Model.Permissions.CanUnbanUserAsync(targetUser)">| <a asp-controller="@nameof(AccountController).GetController()" asp-action="@nameof(AccountController.UnbanAsync)" asp-route-userId="@targetUser.Id">Unban</a></span>
                <span include-if="await Model.Permissions.CanReportAsync(targetUser.Profile)" class="btn-report">| <a class="no-redirect" href="" onclick="reportProfile(this, @targetUser.Profile.Id)">Report</a></span>
                <span include-if="await Model.Permissions.CanReportViolationAsync(targetUser.Profile)">| <a asp-page="/ViolationReport" asp-page-handler="Profile" asp-route-id="@targetUser.Profile.Id">Report violation</a></span>
                <span include-if="await Model.Permissions.CanBanUserAsync(targetUser)">| <a class="operation-danger" asp-page="/Account/BanConfirmation" asp-route-id="@targetUser.Id">Ban</a></span>
            </h2>

            @await Html.PartialAsync("_ProfileImage", targetUser)

            <div>@("Name: " + targetUser.UserName)</div>
            <div>@("Gender: " + targetUser.Profile.Gender.GetEnumValueDescription())</div>
            @if (canSeePrivateInformation)
            {
                <div>@("E-Mail: " + targetUser.Email)</div>
                <div>@("E-Mail confirmed: " + targetUser.EmailConfirmed.Ternar("Yes", "No"))</div>
            }
            <div>@("Role: " + Model.Role)</div>
            <div>@("State: " + targetUser.Status.State.GetEnumValueDescription())</div>

            <div>@("Registration date: " + targetUser.Profile.RegistrationDate.ToString("dd.MM.yyyy"))</div>
            @if (targetUser.EmailConfirmed)
            {
                if (canEdit)
                {
                    <div><a asp-page="/Account/ProfileEdit" asp-route-id="@targetUser.Id">Edit profile</a></div>
                }
                if (await Model.Permissions.CanChangePasswordAsync(targetUser))
                {
                    <div><a asp-page="/Account/PasswordChange" asp-route-id="@targetUser.Id">Change password</a></div>
                }
                if (await Model.Permissions.CanChangeEmailAsync(targetUser))
                {
                    <div><a asp-page="/Account/EmailChange" asp-route-id="@targetUser.Id">Change e-mail</a></div>
                }
            }
            else
            {
                if (Model.IsCurrentUser)
                {
                    <div><a asp-page="/Account/ConfirmEMail">Confirm email</a></div>
                }
            }

            <h4>About @targetUser.UserName @await generateEditButtonAsync(targetUser.Id, canEdit)</h4>
            @if (string.IsNullOrEmpty(targetUser.Profile.About))
            {
                <div>No information provided</div>
            }
            else
            {
                <div>@targetUser.Profile.About</div>
            }

            <div include-if="targetUser.Posts.Any(p => p.State.IsOneOf(ModerationState.MODERATED))">
                <h3>Posts</h3>

                @foreach (var post in targetUser.Posts
                  .Where(p => p.State.IsOneOf(ModerationState.MODERATED))
                  .OrderByDescending(p => p.CreationTime))
                {
                    <div><a asp-page="/Post" asp-route-id="@post.Id">@post.Title</a></div>
                }
            </div>

            <div include-if="canSeePrivateInformation && targetUser.Posts.Any(p => p.State.IsOneOf(ModerationState.MODERATION_NOT_PASSED, ModerationState.UNDER_MODERATION))">
                <h3>Posts under moderation</h3>

                @foreach (var post in targetUser.Posts
                   .Where(p => p.State.IsOneOf(ModerationState.MODERATION_NOT_PASSED, ModerationState.UNDER_MODERATION))
                   .OrderByDescending(p => p.CreationTime))
                {
                    {
                        var routeParams = new Dictionary<string, string>()
                            {
                            { "id", post.Id.ToString() }
                        };
                        if (post.Edits.Count != 0 && post.LastEdit.State != ModerationState.MODERATED)
                        {
                            routeParams.Add("lastEdit", "true");
                        }

                        <div>
                            <a asp-page="/Post" asp-all-route-data="@routeParams">@post.Title</a>
                        </div>
                    }
                }
            </div>

            @if (await Model.Permissions.CanSeeServiceInformationAsync())
            {
                <h4>Violations</h4>

                if (targetUser.Violations.Count == 0)
                {
                    <span>None we know about ;)</span>
                }

                <ul>
                    @foreach (var violation in targetUser.Violations.OrderByDescending(v => v.CreationDate))
                    {
                        <li>
                            <span>Got from <a asp-page="/Account/Profile" asp-route-id="@violation.Reporter.Id">@violation.Reporter.UserName</a>, object: </span>
                            @{ await Html.RenderPartialAsync("_ObjectReference", new ObjectReferenceModel(violation.Object)); }
                            <div>
                                <span>Description: @violation.Description</span>
                            </div>
                        </li>
                    }
                </ul>

                <h4>Reports</h4>

                if (targetUser.Reports.Count == 0)
                {
                    <span>None we know about ;)</span>
                }

                <ul>
                    @foreach (var report in targetUser.Reports.OrderByDescending(r => r.CreationDate))
                    {
                        <li>
                            <span>Reported by <a asp-page="/Account/Profile" asp-route-id="@report.Reporter.Id">@report.Reporter.UserName</a> at @report.CreationDate.ToHoursDateString(). Report object: </span>
                            @{ await Html.RenderPartialAsync("_ObjectReference", new ObjectReferenceModel(report.Object)); }
                        </li>
                    }
                </ul>

                <h4>Actions</h4>

                if (targetUser.Actions.Count == 0)
                {
                    <span>Nothing at the moment</span>
                }

                <ul>
                    @foreach (var action in targetUser.Actions.OrderByDescending(r => r.ActionDate))
                    {
                        <li>
                            <span>@action.ActionType.ToString() at @action.ActionDate.ToString("hh:mm dd.MM.yyyy"). Object: </span>
                            @if (action.ReportObject != null)
                            {
                                await Html.RenderPartialAsync("_ObjectReference", new ObjectReferenceModel(action.ReportObject));
                            }
                            else
                            {
                                <span>unknown</span>
                            }
                        </li>
                    }
                </ul>
            }

            <div>
                Seen @Model.UserModel.Profile.ViewStatistic.TotalViews times
            </div>
        </div>
    </div>
</div>

@functions
{
    public async Task<object> generateEditButtonAsync(string userId, bool showLink)
    {
        return await Html.PartialAsync("_Anchor", new AnchorModel("Edit", "/Account/ProfileEdit", userId, showLink));
    }
}

@section Scripts
{
    <script>
        @{
            var target = new ControllerAction(nameof(ReportingController), nameof(ReportingController.ReportProfileAsync));
        }

        function reportProfile(element, id) {
            report(element, "@target.GetURI()", id);
        }
    </script>
}