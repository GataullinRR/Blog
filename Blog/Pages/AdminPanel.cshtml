@page
@model Blog.Pages.AdminPanelModel
@{
    ViewData["Title"] = "Blog control";
}

@{
    var overviewTabId = "v-pills-overview";
    var usersTabId = "v-pills-users";
    var publicationsTabId = "v-pills-publications";
    var moderatorsTabId = "v-pills-moderators";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col" style="max-width:200px; width:200px;">
            <div class="nav flex-column nav-pills sticky-top pt-2" id="v-pills-tab" role="tablist" aria-orientation="vertical">
                <a class="nav-link active" data-toggle="pill" href="#@overviewTabId" role="tab" aria-selected="true">Overview</a>
                <a class="nav-link" data-toggle="pill" id="@moderatorsTabId-tab" href="#@moderatorsTabId" role="tab" aria-selected="false">Moderators</a>
                <a class="nav-link" data-toggle="pill" href="#@publicationsTabId " role="tab" aria-selected="false">Publications</a>
                <a class="nav-link" data-toggle="pill" href="#@usersTabId" role="tab" aria-selected="false">Users</a>
                <a class="nav-link" data-toggle="pill" href="#v-pills-controls" role="tab" aria-selected="false">Controls</a>
            </div>
        </div>

        <div class="col container-main">
            <div class="tab-content " id="v-pills-tabContent">
                <div class="tab-pane fade show active" id="@overviewTabId" role="tabpanel">
                    <div class="fa-3x">
                        <p class="text-center">Loading... <i class="fas fa-cog fa-spin"></i></p>
                    </div>
                    @*<h3>Currently active moderators</h3>
                        <ul>
                            @foreach (var moderator in Model.Moderators.Where(m => m.Status.State == ProfileState.ACTIVE))
                            {
                                <li>
                                    @{ await Html.RenderPartialAsync("_ModeratorControl", moderator); }
                                </li>
                            }
                        </ul>

                        <h3>Inactive moderators</h3>

                        <ul>
                            @foreach (var moderator in Model.Moderators.Where(m => m.Status.State != ProfileState.ACTIVE))
                            {
                                <li>
                                    @{ await Html.RenderPartialAsync("_ModeratorControl", moderator); }
                                </li>
                            }
                        </ul>*@
                </div>

                <div class="tab-pane fade" id="@moderatorsTabId" role="tabpanel">
                    <div class="fa-3x">
                        <p class="text-center">Loading... <i class="fas fa-cog fa-spin"></i></p>
                    </div>
                </div>

                <div class="tab-pane fade" id="@publicationsTabId" role="tabpanel">
                    @{ await Html.RenderPartialAsync("AdminPanel/_PublicationsTab"); }
                </div>

                <div class="tab-pane fade" id="@usersTabId" role="tabpanel">
                    <partial name="@Partials.AdminPanel.USERS_TAB"/>
                </div>

                <div class="tab-pane fade" id="v-pills-controls" role="tabpanel">
                    <p>
                        From here you can invite a new moderator or administrator by creating an invitation link.
                        Once generated the link lasts for 30 minutes
                    </p>

                    <ul>
                        <li>
                            <a href="" id="inviteModerator" class="no-redirect" onclick="inviteModerator()">Invite</a> a new moderator
                        </li>
                        <li>
                            <a href="" id="inviteOwner" class="no-redirect" onclick="inviteOwner()">Invite</a> a new administrator*
                        </li>
                    </ul>

                    <p class="text-secondary">* new administrator won't be able to invite other administrators</p>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.css" integrity="sha256-aa0xaJgmK/X74WM224KMQeNQC2xYKwlAt08oZqjeF0E=" crossorigin="anonymous" />
    @*<link rel="stylesheet" href="~/css/jQRangeSlider/iThing.css" type="text/css" />*@
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.bundle.js" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.js" crossorigin="anonymous"></script>
    <script src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.20/js/dataTables.bootstrap4.min.js"></script>
    @*<script src="~/js/jQRangeSlider/jQDateRangeSlider-min.js"></script>*@
    <script>
        $(document).ready(function () {
            // We need to re-render charts inside tab, otherwise the charts wont be shown
            @*$('#@moderatorsTabId-tab').on('shown.bs.tab', function (event) {
                var x = $(event.target).text();         // active tab
                var y = $(event.relatedTarget).text();  // previous tab
                console.log("Fired!");

                if (renderModeratorsTabParial) {
                    renderModeratorsTabParial();
                }
            });*@

            Chart.defaults.global.title.fontSize = 22;
            Chart.defaults.global.title.display = true;
            Chart.defaults.global.defaultFontColor = "#000000";
            Chart.defaults.global.title.fontStyle = 'normal';
            Chart.defaults.global.defaultFontStyle = 'normal';

            loadPostsTabPartial();
            loadUsersTabPartial();

                        @*var uri = "/AdminPanelTabs/LoadModeratorsTabAsync"
            makeRequest(uri, "GET", function (response) {
                var idSelector = '#@overviewTabId';
                $(idSelector).html(response);
                evaluateScripts(idSelector);
                renderModeratorsTabParial();
            });*@

            var uri = "/AdminPanelTabs/LoadModeratorsTabAsync"
            makeRequest(uri, "GET", function (response) {
                var idSelector = '#@moderatorsTabId';
                $(idSelector).html(response);
                evaluateScripts(idSelector);
                renderModeratorsTabParial();
            });

            var uri = "/AdminPanelTabs/LoadOverviewTabAsync"
            makeRequest(uri, "GET", function (response) {
                var idSelector = '#@overviewTabId';
                $(idSelector).html(response);
                evaluateScripts(idSelector);
                loadOverviewTabPartial();
            });

            function evaluateScripts(idSelector)
            {
                var scripts = $(idSelector + ' script');
                for (var i = 0; i < scripts.length; i++) {
                    eval(scripts[i].innerText);
                }
            }
        });

        function inviteModerator() {
            invite("moderator");
        }
        function inviteOwner() {
            invite("owner");
        }
        function invite(who) {
            var isOwner = who == "owner";
            var activationLinkType = isOwner
                ? "@((int)ActivationLinkAction.REGISTER_AS_OWNER)"
                : "@((int)ActivationLinkAction.REGISTER_AS_MODERATOR)";
            var closer = showBusy("Generating " + (isOwner ? "owner" : "moderator") + " invitation link...");
            var route = "/ActivationLinks/GenerateLink?actionRaw=" + activationLinkType;
            makeRequest(route, "get", function (response) {
                activationLinks[activationLinks.length] = response;
                renderMessage("Invitation link has been generated. Copy and send it to the user you want to invite.", "Copy link=>copyLastActivationLink(" + (activationLinks.length - 1) + ")");
                closer();
            });
        }

        var activationLinks = [];
        function copyLastActivationLink(index) {
            copyToClipboard(activationLinks[index]);
        }

        // Copies a string to the clipboard. Must be called from within an
        // event handler such as click. May return false if it failed, but
        // this is not always possible. Browser support for Chrome 43+,
        // Firefox 42+, Safari 10+, Edge and Internet Explorer 10+.
        // Internet Explorer: The clipboard feature may be disabled by
        // an administrator. By default a prompt is shown the first
        // time the clipboard is used (per session).
        function copyToClipboard(text) {
            if (window.clipboardData && window.clipboardData.setData) {
                // Internet Explorer-specific code path to prevent textarea being shown while dialog is visible.
                return clipboardData.setData("Text", text);
            }
            else if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
                var textarea = document.createElement("textarea");
                textarea.textContent = text;
                textarea.style.position = "fixed";  // Prevent scrolling to bottom of page in Microsoft Edge.
                document.body.appendChild(textarea);
                textarea.select();
                try {
                    return document.execCommand("copy");  // Security exception may be thrown by some browsers.
                }
                catch (ex) {
                    console.warn("Copy to clipboard failed.", ex);
                    return false;
                }
                finally {
                    document.body.removeChild(textarea);
                }
            }
        }

        function plotPie(containerId, title, categories, values, colors) {
            var ctx = document.getElementById(containerId).getContext('2d');
            return new Chart(ctx, {
                type: 'doughnut',
                data: {
                    datasets: [{
                        data: values,
                        backgroundColor: colors
                    }],
                    labels: categories
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    legend: {
                        position: "bottom",
                        align: "center"
                    },
                    title: {
                        display: true,
                        text: title
                    },
                    layout: {
                        padding: {
                            left: 0,
                            right: 0,
                            top: 0,
                            bottom: 0
                        }
                    },
                    tooltips: {
                        callbacks: {
                            label: function (tooltipItem, data) {
                                var dataset = data.datasets[tooltipItem.datasetIndex];
                                var currentValue = dataset.data[tooltipItem.index];
                                return data.labels[tooltipItem.index] + ": " + currentValue + "%";
                            }
                        }
                    }
                }
            });
        }

    </script>
}