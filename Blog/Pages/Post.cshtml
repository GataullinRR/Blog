@page "{id:int}"
@model Blog.Pages.PostModel
@using DBModels

@{
    ViewData["Title"] = Model.Post.Title;
}

<div class="container container-main">
    <div class="row">
        <div class="col">
            <h2>
                <span>@Model.Post.Title</span>
                @await Html.PartialAsync("_Anchor", new AnchorModel("Edit", "/PostEdit", "id", Model.Post.Id, await Model.Permissions.CanEditPostAsync(Model.Post)))
                <span include-if="await Model.Permissions.CanReportAsync(Model.Post)" class="btn-report">| <a class="no-redirect" href="" onclick="reportPost(this, @Model.Post.Id)">Report</a></span>
                <span include-if="await Model.Permissions.CanReportViolationAsync(Model.Post)">| <a asp-page="/ViolationReport" asp-page-handler="Post" asp-route-id="@Model.Post.Id">Report violation</a></span>
                <span include-if="await Model.Permissions.CanMarkAsModeratedAsync(Model.Post)">| <a class="operation-primary" asp-controller="@nameof(ModerationController).GetController()" asp-action="@nameof(ModerationController.MarkPostAsModeratedAsync)" asp-route-id="@Model.Post.Id">Mark as moderated</a></span>
                <span include-if="await Model.Permissions.CanMarkAsNotPassedModerationAsync(Model.Post)">| <a class="operation-danger" asp-page="/MarkAsNotPassedModeration" asp-route-id="@Model.Post.Id">Mark as not moderated</a></span>
                <span include-if="await Model.Permissions.CanDeletePostAsync(Model.Post)">| <a class="operation-danger" asp-page="/PostDeleteConfirmation" asp-route-id="@Model.Post.Id">Delete</a></span>
                <span include-if="await Model.Permissions.CanUndeletePostAsync(Model.Post)">| <a class="operation-primary" asp-controller="@nameof(PostingController).GetController()" asp-action="@nameof(PostingController.UndeletePostAsync)" asp-route-id="@Model.Post.Id">Restore</a></span>
            </h2>

            <div>
                <div include-if="@Model.Post.IsDeleted" class="text-danger">
                    <div>The post has been deleted and accessible only via link</div>
                    <div>Delete reason: @Model.Post.DeleteReason</div>
                </div>
                <div include-if="@Model.Post.ModerationInfo.State == ModerationState.UNDER_MODERATION" class="text-danger">Post is under moderation and accessible only via link</div>
                <div include-if="@Model.Post.ModerationInfo.State == ModerationState.MODERATION_NOT_PASSED" class="text-danger">Post hasn't passed moderation. Edit to fix problems.</div>
            </div>

            <div class="mb-3 mt-3">
                @{ await Html.RenderPartialAsync("_PostBodyView", new PostViewModel(Model.Post, false)); }
            </div>
            <div>
                <span>Posted by <a asp-page="/Account/Profile" asp-route-id="@Model.Post.Author.Id">@Model.Post.Author.UserName</a> at @Model.Post.CreationTime.ToHoursDateString()</span>
            </div>

            @foreach (var edit in Model.Post.Edits.NullToEmpty())
            {
                <div>
                    <span>Edited at @edit.EditTime.ToString("hh:mm dd.MM.yy") by <a asp-page="/Account/Profile" asp-route-id="@edit.Author.Id">@edit.Author.UserName</a></span>
                    <span>Reason: @edit.Reason</span>
                </div>
            }
            <div>
                <span class="mb-2">Seen @Model.Post.ViewStatistic.TotalViews times</span>
            </div>

            <div include-if="Model.Post.ModerationInfo.State == ModerationState.MODERATED">
                <hr />
                <h3>Commentaries</h3>

                @{ var count = 0; }
                @foreach (var commentary in Model.Commentaries
.OrderByDescending(c => c.CreationTime)
.Take(100)
.Select(c => Html.PartialAsync("_CommentaryContainer", c))
.ToArray())
                {
                    @await commentary;

                    count++;
                }

                <div class="mb-3">
                    <span>@count of @Model.Commentaries.Count() commentaries have been shown</span>
                </div>

                @if (await Model.Permissions.CanAddCommentaryAsync(Model.Post))
                {
                    <form method="post" asp-page-handler="AddCommentary">
                        <input type="hidden" value="@Model.NewCommentary.PostId" asp-for="NewCommentary.PostId" />

                        <div class="form-group">
                            <textarea class="form-control" rows="3" placeholder="Your comment" asp-for="NewCommentary.Body"></textarea>
                            <span class="text-danger" asp-validation-for="NewCommentary.Body"></span>
                        </div>

                        <div asp-validation-summary="ModelOnly" class="text-danger validation-message"></div>

                        <button type="submit" class="btn btn-primary">Send</button>
                    </form>
                }
                else if (!User.Identity.IsAuthenticated)
                {
                    <a asp-page="/Account/Login">Login</a>
                    <span> or </span>
                    <a asp-page="/Account/Register">register</a>
                    <span> to comment</span>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_CommentartyScripts" />

    <script>
        @{
            var target = new ControllerAction(nameof(ReportingController), nameof(ReportingController.ReportPostAsync));
        }

        function reportPost(element, id) {
            report(element, "@target.GetURI()", id);
        }
    </script>
}
