@model AdminPanelModeratorsTabModel
@inject BlogContext Db

@{
    var entitiesChartId = "entities-resolved-chart";
    var totalResolveTimeChartId = "avg-time-to-resolve-chart";
    var entitiesPieChartId = "entities-pie-chart";
    var totalResolveTimePerContributorBarChartId = "resolve-time-bar-chart";
}

<div class="container">
    <div class="row">
        <div class="col">
            <select id="view-selector" class="custom-select" style="max-width: 150px">
                <option value="Summary">Summary</option>
                @foreach (var group in Model.Summary.Groups)
                {
                    <option value="@group.GroupName">@group.GroupName</option>
                }
            </select>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col col-lg-9">
            <div class="chart-container admin-panel-chart">
                <canvas id="@entitiesChartId"></canvas>
            </div>
        </div>
        <div class="col col-lg-3">
            <div class="chart-container admin-panel-chart">
                <canvas id="@entitiesPieChartId"></canvas>
            </div>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col col-lg-9">
            <div class="chart-container admin-panel-chart">
                <canvas id="@totalResolveTimeChartId"></canvas>
            </div>
        </div>
        <div class="col col-lg-3">
            <div class="chart-container admin-panel-chart">
                <canvas id="@totalResolveTimePerContributorBarChartId"></canvas>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="table-responsive mt-3">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th scope="col">Moderator</th>
                            <th scope="col">Registration date</th>
                            <th scope="col">State</th>
                            <th scope="col">Panel</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var moderator in Db.ModeratorsGroups
                                   .Select(mg => mg.Moderators.Select(m => new { m.Profile, m.Status, m.UserName, mid = m.Id, m.ModeratorsGroup.Id }).ToArray())
                                   .Flatten()
                                   .ToArray())
                        {
                            <tr>
                            <td><a asp-page = "/Account/Profile" asp-route-id="@moderator.mid" > @moderator.UserName </a ></td >
                            <td> @moderator.Profile.RegistrationDate.ToDateString() </td >
                            <td> @moderator.Status.State.GetEnumValueDescription() </td >
                            <td ><a asp-page = "/ModeratorPanel" asp-route-id="@moderator.mid" > @Model.Summary.Groups.Find(g => g.GroupId.Value == moderator.Id).Value.GroupName </a ></td >
                            </tr >
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    var model = @Json.Serialize(Model);
    var xAxis = model.summary.xAxis.map(x => new Date(Date.parse(x))).map(d => d.getDate() + "." + (d.getMonth() + 1) + "." + d.getFullYear());
    var c1 = null;
    var c2 = null;
    var c3 = null;
    var c4 = null;
    var borderColors = ["rgba(51,204,51,0.8)", "rgba(255,187,51,0.8)"];
    var backgroundColors = ["rgba(51,204,51,0.2)", "rgba(255,187,51,0.2)"];
    function reInstantiateCharts() {
        if (c1) {
            c1.destroy();
            c2.destroy();
            c3.destroy();
            c4.destroy();
        }
        c1 = instantiateChart("@entitiesChartId", "Resolved entities", "line");
        c2 = instantiateChart("@entitiesPieChartId", "Entities by groups", "doughnut");
        c3 = instantiateChart("@totalResolveTimeChartId", "Average resolve time", "line");
        c4 = instantiateChart("@totalResolveTimePerContributorBarChartId", "Time by groups", "bar");
    }

    $('#view-selector').change(function () {
        var selectorValue = $(this).val();
        console.log("View selected. Name: " + selectorValue);
        if (selectorValue == "Summary") {
            renderSummary();
        }
        else {
            renderGroup(selectorValue);
        }
    });

    function renderModeratorsTabParial() {

        renderSummary();
    }

    function renderGroup(groupName) {
        var rootGroup = model.summary.groups.find(g => g.groupName == groupName);

        var groups = rootGroup.subGroups;
        reInstantiateCharts(); // Just update() does not work :(
        renderResolveTime(groups);
        renderResolvedEntities(groups);
    }

    function renderSummary() {
        reInstantiateCharts();
        var groups = model.summary.groups;
        renderResolveTime(groups);
        renderResolvedEntities(groups);
    }

    function renderResolvedEntities(groups) {


        var resolvedEntitiesTotalCount = 0;
        for (var i = 0; i < groups.length; i++) {
            resolvedEntitiesTotalCount += groups[i].resolvedEntities.sum();
        }

        var datasets = [];
        var groupNames = [];
        var resolvedEntitiesRatioByGroups = [];
        for (var i = 0; i < groups.length; i++) {
            var group = groups[i];
            var dataset = {
                label: group.groupName,
                data: group.resolvedEntities,
                backgroundColor: [backgroundColors[i]],
                borderColor: [borderColors[i]],
                borderWidth: 2,
            };
            datasets.push(dataset);

            var ratio = (100 * group.resolvedEntities.sum() / resolvedEntitiesTotalCount).toPrecision(2);
            resolvedEntitiesRatioByGroups.push(ratio);

            groupNames.push(group.groupName);
        }

        plotInto(c1, xAxis, datasets);
        plotInto(c2, groupNames, [{ data: resolvedEntitiesRatioByGroups, backgroundColor: borderColors  }]);
    }

    function renderResolveTime(groups) {
        var timeToResolvePerResolvedEntity = {
            label: "Resolve time",
            data: new Array(xAxis.length),
            borderColor: [borderColors[0]],
            backgroundColor: [backgroundColors[0]],
            borderWidth: 2,
        };
        for (var i = 0; i < xAxis.length; i++) {
            var time = 0;
            var resolvedEntitiesCount = 0;
            for (var j = 0; j < groups.length; j++)
            {
                var group = groups[j];
                var providedTime = group.summedResolveTime[i];
                time += isNaN(providedTime)
                    ? 0
                    : providedTime;
                resolvedEntitiesCount += group.resolvedEntities[i];
            }

            time = time == 0
                ? NaN // will be rendered as discontinuity
                : time;
            timeToResolvePerResolvedEntity.data[i] = (time / resolvedEntitiesCount).toPrecision(2);
        }

        plotInto(c3, xAxis, [timeToResolvePerResolvedEntity]);

        var groupNames = [];
        var avgTimeToResolvePerGroup =
        {
            label: "Average resolve time",
            data: new Array(groups.length),
            borderColor: borderColors,
            backgroundColor: borderColors,
        };
        for (var i = 0; i < groups.length; i++) {
            var group = groups[i];
            groupNames.push(group.groupName);
            var time = group.summedResolveTime.filter(t => !isNaN(t)).sum();
            var resolvedEntitiesCount = group.resolvedEntities.sum();
            avgTimeToResolvePerGroup.data[i] = (time / resolvedEntitiesCount).toPrecision(2);
        }

        plotInto(c4, groupNames, [avgTimeToResolvePerGroup]);
    }

    function instantiateChart(containerId, title, type)
    {
        var ctx = document.getElementById(containerId).getContext('2d');
        if (type == "doughnut") {
            return new Chart(ctx, {
                type: type,
                data: {
                    labels: [{}],
                    datasets: [{}]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    legend: {
                        position: "bottom",
                        align: "center"
                    },
                    title: {
                        display: true,
                        text: title
                    },
                    layout: {
                        padding: {
                            left: 0,
                            right: 0,
                            top: 0,
                            bottom: 0
                        }
                    },
                    tooltips: {
                        callbacks: {
                            label: function (tooltipItem, data) {
                                var dataset = data.datasets[tooltipItem.datasetIndex];
                                var currentValue = dataset.data[tooltipItem.index];
                                return data.labels[tooltipItem.index] + ": " + currentValue + "%";
                            }
                        }
                    }
                }
            });
        }
        else {
            return new Chart(ctx, {
                responsive: true,
                maintainAspectRatio: false,
                type: type,
                data: {
                    labels: [{}],
                    datasets: [{}]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: type === "bar"
                            }
                        }],
                        xAxes: [{
                            gridLines: {
                                display: false
                            },
                            ticks: {
                                autoSkip: true,
                                autoSkipPadding: 20,
                                maxRotation: 0,
                                minRotation: 0
                            }
                        }]
                    },
                    legend: {
                        display: false,
                    },
                    title: {
                        display: true,
                        text: title
                    },
                    elements: {
                        point: {
                            radius: 0
                        }
                    },
                    maintainAspectRatio: false
                }
            });
        }
    }


    function plotInto(chart, xAxis, datasets) {
        chart.data = {
            labels: xAxis,
            datasets: datasets
        };

        chart.update();
    }
</script>