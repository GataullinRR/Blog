@{
    var model = (Model as ILayoutModelProvider)?.LayoutModel ?? new LayoutModel();
    var currentUser = await UserManager.GetUserAsync(User);
}
@inject Blog.Services.PermissionsService Permissions
@inject Microsoft.AspNetCore.Identity.UserManager<User> UserManager

<!DOCTYPE html>

<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="~/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="~/ js / tinymce / skins / ui / oxide / content.min.css" />
    @*<link rel="stylesheet" href="~/js/tinymce/skins/content/default/content.min.css" />*@

    <title>@ViewData["Title"]</title>
</head>

<body>
    <div id="busyModal" class="modal">
        <div class="modal-content">
            <p id="busyModalTextContainer" align="center"></p>
        </div>
    </div>

    <a asp-page="/Index">Home</a>
    @if (User.Identity.IsAuthenticated)
    {
        <a asp-page="/Account/Profile">@User.Identity.Name</a>
        <a asp-controller="Account" asp-action="Logout">Logout</a>
    }
    else
    {
        <a asp-page="/Account/Login">Login</a>
        <a asp-page="/Account/Register">Register</a>
    }
    @if (await Permissions.CanAccessModeratorsPanelAsync(currentUser))
    {
        <a asp-page="/ModeratorPanel">Moderator panel</a>
    }
    @if (await Permissions.CanAccessBlogControlPanelAsync())
    {
        <a asp-page="/BlogControlPanel">Control panel</a>
    }
    <hr />

    <div id="messages">
        @foreach (var message in model.Messages)
        {
            await Html.RenderPartialAsync("_MessageTemplate", message);
        }
    </div>
    @RenderBody()

    <hr />
    <h6>GataullinRR</h6>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <partial name="_JQuery" />
    <script src="~/lib/jquery-ajax-unobtrusive/dist/jquery.unobtrusive-ajax.min.js" type="text/javascript"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.js" type="text/javascript"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js" type="text/javascript"></script>
    <script src="~/js/tinymce/tinymce.min.js"></script>

    <script>
        // See https://www.tiny.cloud/docs/demo/full-featured/
        // and https://www.tiny.cloud/docs/configure/editor-appearance/#menu
        tinymce.init({
            mode : "specific_textareas",
            editor_selector : "rich-edit",
            plugins: 'preview paste searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen table image link codesample charmap hr pagebreak nonbreaking anchor insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap quickbars emoticons',
            imagetools_cors_hosts: ['picsum.photos'],
            toolbar: 'undo redo | bold italic underline strikethrough | outdent indent |  numlist bullist | removeformat | charmap emoticons | fullscreen preview | insertfile image media link anchor codesample',
            toolbar_sticky: true,
            autosave_ask_before_unload: true,
            autosave_interval: "30s",
            autosave_prefix: "{path}{query}-{id}-",
            autosave_restore_when_empty: false,
            autosave_retention: "10m",
            image_advtab: true,
            importcss_append: true,
            height: 400,
            height: 600,
            image_caption: true,
            quickbars_selection_toolbar: 'bold italic underline strikethrough | quicklink blockquote quickimage quicktable',
            noneditable_noneditable_class: "mceNonEditable",
            toolbar_drawer: 'sliding',
            contextmenu: "link image imagetools",
            menu: {
                file: { title: 'File', items: 'newdocument restoredraft | preview | print ' },
                edit: { title: 'Edit', items: 'undo redo | cut copy paste | selectall | searchreplace' },
                view: { title: 'View', items: 'code | visualaid visualchars visualblocks | spellchecker | preview fullscreen' },
                insert: { title: 'Insert', items: 'image link media codesample inserttable | charmap emoticons hr | anchor toc | insertdatetime' },
                format: { title: 'Format', items: 'bold italic underline strikethrough superscript subscript | removeformat' },
                tools: { title: 'Tools', items: 'code wordcount' },
                table: { title: 'Table', items: 'inserttable tableprops deletetable row column cell' },
                help: { title: 'Help', items: '' }
            }
        });

        $(document).ready(function () {
            function applyClasses() {
                $('a').click(function (e) {
                    if ($(this).hasClass("no-redirect")) {
                        e.preventDefault();
                    }
                    else {

                    }
                });
            }

            var observer = new MutationObserver(function (mutations) {
                mutations.forEach(function (mutation) {
                    if (mutation.addedNodes && mutation.addedNodes.length > 0) {
                        applyClasses();
                    }
                });
            });

            var config = {
                attributes: true,
                childList: true,
                characterData: true,
                subtree: true, // Important
            };

            observer.observe(document.body, config);
            applyClasses();
        });

        function showBusy(operationName) {
            var modal = document.getElementById("busyModal");
            var modalTextContainer = document.getElementById("busyModalTextContainer");
            modalTextContainer.innerHTML = operationName;
            modal.style.display = "block";

            return function () {
                modal.style.display = "none";
            }
        }

        function renderMessage(messageText, jsActions) {
            var route = "/Messages/GetMessageView?body=" + messageText;
            if (jsActions != undefined) {
                route += "&jsActions=" + jsActions;
            }
            makeRequest(route, "get", function (response) {
                var container = document.createElement("div");
                container.innerHTML = response;
                document.getElementById("messages").appendChild(container);
            });
        }

        function removeParent(element) {
            var container = element.parentElement;
            container.parentElement.removeChild(container);

            return true;
        }

        function makeRequest(route, requestType, onLoaded) {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    onLoaded(this.responseText);
                }
            };
            xhr.open(requestType, route);
            xhr.send();
        }
    </script>

    @RenderSection("Scripts", required: false)
</body>
</html>
